: '
   Примеры реализаций shell-скриптов. Пример 5
   Написать программу вывода имен всех объектных файлов 
   каталога /home/ubuntu/test, превышающих по объему число,
   указанное в качестве первого внешнего аргумента скрипта.
   Сделать файл исполняемым:
   chmod u+x ./lect156-5.sh

'
dir=`pwd` # Запоминаем текущий каталог
: '
shell-переменной $dir присваивается результат выполнения команды pwd. 
Теперь $dir содержит имя текущего каталога (полный путь от корневого
каталога к текущему рабочему каталогу).
'
cd /home/ubuntu/test # Переход в целевой каталог
files=`file * | grep object | cut -d : -f 1`
: 'Утилита
file *
в каждом из файлов текущего каталога анализирует первые 10 записей и выводит имя 
файла, затем символ двоеточия, затем тип этого файла и другую информацию.
Организован конвейер: результат команды file передается через межпроцессный канал 
по конвейеру на вход утилиты grep, которая выводит только те записи, которые 
содержат шаблон "object":
| grep object
Затем полученный набор записей, содержащих искомый шаблон, передается по конвейеру 
на вход утилиты cut, которая вырезает первый столбец до символа разделения ":"
| cut -d : -f 1
Результат выполнения конвейера из трех утилит, содержащий имена всех объектных 
файлов текущего (целевого) каталога, сохраняется в shell-переменную $files.
'
for i in $files # Цикл по переменной $files, значение переменной $i будет 
do              # принимать имена файлов.
   n=`du -b $i | awk '{print $1}'` # В переменную $n записывается размер 
                                   # указанного файла $i в байтах.
   : ' Утилита du с опцией -b выводит размер файла в байтах и имя файла, 
   содержащееся в shell-переменной $i.
   Результат работы утилиты du передается через межпроцессный канал по конвейеру 
   на вход утилиты awk, которая вырезает первое поле, содержащее размер файла:
   | awk '{print $1}'
   Одинарные кавычки применяются для того, чтобы экранировать знак доллара, чтобы 
   shell не восприняла последовательность символов "$1" как первый внешний аргумент. 
   Вместо утилиты awk можно использовать также утилиту cut, редактор sed и т.д.
   '
   if [ $n -gt $1 ]; then # Если значение переменной $n больше значения первого
                          # внешнего аргумента $1, то в стандартный файл вывода 
      echo $i             # (монитор) выводится имя этого файла.
   fi
done
cd $dir # Возврат в каталог, в котором мы находились до выполнения процедуры.
